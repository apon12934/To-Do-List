/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import javax.swing.*;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author Apon
 */
public class TodoListApp extends javax.swing.JFrame {
    
    // Data structures to hold tasks for each event
    private final Map<String, List<String>> eventTasks;
    private final Map<String, List<String>> eventCompletedTasks;
    private final Map<String, String> eventDates;
    private DefaultListModel<String> eventListModel;

    /**
     * Creates new form TodoListApp
     */
    public TodoListApp() {
        eventTasks = new HashMap<>();
        eventCompletedTasks = new HashMap<>();
        eventDates = new HashMap<>();
        
        initComponents();
        setupCustomComponents();
        setupEventListeners();
        loadEventsFromFiles();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        eventPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        eventList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        eventNameField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        eventDateField = new javax.swing.JTextField();
        addEventButton = new javax.swing.JButton();
        taskPanel = new javax.swing.JPanel();
        eventInfoPanel = new javax.swing.JPanel();
        selectedEventTitle = new javax.swing.JLabel();
        selectedEventDate = new javax.swing.JLabel();
        jSplitPane2 = new javax.swing.JSplitPane();
        todoScrollPane = new javax.swing.JScrollPane();
        todoPanel = new javax.swing.JPanel();
        completedScrollPane = new javax.swing.JScrollPane();
        completedPanel = new javax.swing.JPanel();
        taskControlsPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        taskField = new javax.swing.JTextField();
        addTaskButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Todo List Manager");

        eventPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Events"));

        eventList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(eventList);

        jLabel1.setText("Event Name:");

        jLabel2.setText("Event Date:");

        addEventButton.setText("Add Event");
        addEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEventButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout eventPanelLayout = new javax.swing.GroupLayout(eventPanel);
        eventPanel.setLayout(eventPanelLayout);
        eventPanelLayout.setHorizontalGroup(
            eventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
            .addGroup(eventPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eventNameField)
                    .addComponent(eventDateField)
                    .addComponent(addEventButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(eventPanelLayout.createSequentialGroup()
                        .addGroup(eventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        eventPanelLayout.setVerticalGroup(
            eventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addEventButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(eventPanel);

        selectedEventTitle.setText("Event: No event selected");

        selectedEventDate.setText("Date:");

        javax.swing.GroupLayout eventInfoPanelLayout = new javax.swing.GroupLayout(eventInfoPanel);
        eventInfoPanel.setLayout(eventInfoPanelLayout);
        eventInfoPanelLayout.setHorizontalGroup(
            eventInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectedEventTitle)
                .addGap(18, 18, 18)
                .addComponent(selectedEventDate)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        eventInfoPanelLayout.setVerticalGroup(
            eventInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eventInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectedEventTitle)
                    .addComponent(selectedEventDate))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setResizeWeight(0.5);

        todoScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Todo List"));

        todoPanel.setLayout(new javax.swing.BoxLayout(todoPanel, javax.swing.BoxLayout.Y_AXIS));
        todoScrollPane.setViewportView(todoPanel);

        jSplitPane2.setTopComponent(todoScrollPane);

        completedScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Completed List"));

        completedPanel.setLayout(new javax.swing.BoxLayout(completedPanel, javax.swing.BoxLayout.Y_AXIS));
        completedScrollPane.setViewportView(completedPanel);

        jSplitPane2.setBottomComponent(completedScrollPane);

        jLabel3.setText("New Task:");

        addTaskButton.setText("Add Task");
        addTaskButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTaskButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout taskControlsPanelLayout = new javax.swing.GroupLayout(taskControlsPanel);
        taskControlsPanel.setLayout(taskControlsPanelLayout);
        taskControlsPanelLayout.setHorizontalGroup(
            taskControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskControlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(taskField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addTaskButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        taskControlsPanelLayout.setVerticalGroup(
            taskControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskControlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(taskControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(taskField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addTaskButton)
                    .addComponent(saveButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout taskPanelLayout = new javax.swing.GroupLayout(taskPanel);
        taskPanel.setLayout(taskPanelLayout);
        taskPanelLayout.setHorizontalGroup(
            taskPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(eventInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane2)
            .addComponent(taskControlsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        taskPanelLayout.setVerticalGroup(
            taskPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskPanelLayout.createSequentialGroup()
                .addComponent(eventInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(taskControlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jSplitPane1.setRightComponent(taskPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEventButtonActionPerformed
        addEvent();
    }//GEN-LAST:event_addEventButtonActionPerformed

    private void deleteEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEventButtonActionPerformed
        deleteEvent();
    }//GEN-LAST:event_deleteEventButtonActionPerformed

    private void addTaskButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTaskButtonActionPerformed
        addTask();
    }//GEN-LAST:event_addTaskButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        saveCurrentEvent();
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TodoListApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TodoListApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TodoListApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TodoListApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TodoListApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEventButton;
    private javax.swing.JButton addTaskButton;
    private javax.swing.JPanel completedPanel;
    private javax.swing.JScrollPane completedScrollPane;
    private javax.swing.JTextField eventDateField;
    private javax.swing.JPanel eventInfoPanel;
    private javax.swing.JList<String> eventList;
    private javax.swing.JTextField eventNameField;
    private javax.swing.JPanel eventPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel selectedEventDate;
    private javax.swing.JLabel selectedEventTitle;
    private javax.swing.JPanel taskControlsPanel;
    private javax.swing.JTextField taskField;
    private javax.swing.JPanel taskPanel;
    private javax.swing.JPanel todoPanel;
    private javax.swing.JScrollPane todoScrollPane;
    // End of variables declaration//GEN-END:variables

    private void setupCustomComponents() {
        // Initialize the list model and set it to the event list
        eventListModel = new DefaultListModel<>();
        eventList.setModel(eventListModel);
        
        // Set custom cell renderer for events with delete buttons
        eventList.setCellRenderer(new EventListCellRenderer());
        
        // Set larger row height for better appearance
        eventList.setFixedCellHeight(40);
        
        // Configure scroll panes for better behavior
        todoScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        todoScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        completedScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        completedScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        
        // Set scroll unit increments for smoother scrolling
        todoScrollPane.getVerticalScrollBar().setUnitIncrement(16);
        completedScrollPane.getVerticalScrollBar().setUnitIncrement(16);
    }
    
    private void setupEventListeners() {
        eventList.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                String selectedEvent = eventList.getSelectedValue();
                if (selectedEvent != null) {
                    loadTasksForEvent(selectedEvent);
                }
            }
        });
        
        // Add mouse listener to handle delete button clicks
        eventList.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent e) {
                int index = eventList.locationToIndex(e.getPoint());
                if (index >= 0) {
                    Rectangle cellBounds = eventList.getCellBounds(index, index);
                    if (cellBounds != null) {
                        // Check if click is in the delete button area (right side of cell)
                        int deleteButtonX = cellBounds.x + cellBounds.width - 35; // 35px for button + padding
                        if (e.getX() >= deleteButtonX && e.getX() <= cellBounds.x + cellBounds.width) {
                            // Click was on delete button
                            String eventName = eventListModel.getElementAt(index);
                            deleteSpecificEvent(eventName);
                        }
                    }
                }
            }
        });
    }

    private void addEvent() {
        String eventName = eventNameField.getText().trim();
        String eventDate = eventDateField.getText().trim();

        if (!eventName.isEmpty()) {
            if (!eventListModel.contains(eventName)) {
                eventListModel.addElement(eventName);
                eventTasks.put(eventName, new ArrayList<>());
                eventCompletedTasks.put(eventName, new ArrayList<>());
                eventDates.put(eventName, eventDate);

                eventNameField.setText("");
                eventDateField.setText("");
            } else {
                JOptionPane.showMessageDialog(this, "Event already exists!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void deleteEvent() {
        String selectedEvent = eventList.getSelectedValue();
        if (selectedEvent == null) {
            JOptionPane.showMessageDialog(this, "No event selected!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int result = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to delete event '" + selectedEvent + "' and all its tasks?", 
            "Confirm Delete", 
            JOptionPane.YES_NO_OPTION);

        if (result == JOptionPane.YES_OPTION) {
            // Remove from UI
            eventListModel.removeElement(selectedEvent);
            
            // Remove from data structures
            eventTasks.remove(selectedEvent);
            eventCompletedTasks.remove(selectedEvent);
            eventDates.remove(selectedEvent);
            
            // Delete files
            try {
                File taskFile = new File(selectedEvent + ".txt");
                File completedFile = new File("COMPLETED_" + selectedEvent + ".txt");
                
                if (taskFile.exists()) {
                    taskFile.delete();
                }
                if (completedFile.exists()) {
                    completedFile.delete();
                }
            } catch (Exception e) {
                System.err.println("Error deleting files for " + selectedEvent + ": " + e.getMessage());
            }
            
            // Clear task panels
            todoPanel.removeAll();
            completedPanel.removeAll();
            selectedEventTitle.setText("Event: No event selected");
            selectedEventDate.setText("Date:");
            
            todoPanel.revalidate();
            todoPanel.repaint();
            completedPanel.revalidate();
            completedPanel.repaint();
        }
    }

    private void addTask() {
        String selectedEvent = eventList.getSelectedValue();
        String taskText = taskField.getText().trim();

        if (selectedEvent != null && !taskText.isEmpty()) {
            eventTasks.get(selectedEvent).add(taskText);
            taskField.setText("");
            loadTasksForEvent(selectedEvent);
        }
    }

    private void loadTasksForEvent(String eventName) {
        selectedEventTitle.setText("Event: " + eventName);
        selectedEventDate.setText("Date: " + eventDates.getOrDefault(eventName, ""));

        // Load tasks from files
        loadTasksFromFile(eventName);

        // Clear panels
        todoPanel.removeAll();
        completedPanel.removeAll();

        // Add pending tasks
        List<String> tasks = eventTasks.get(eventName);
        if (tasks != null) {
            for (String task : tasks) {
                JPanel taskPanel = createTaskPanel(eventName, task, false);
                todoPanel.add(taskPanel);
            }
        }

        // Add completed tasks
        List<String> completedTasks = eventCompletedTasks.get(eventName);
        if (completedTasks != null) {
            for (String task : completedTasks) {
                JPanel taskPanel = createTaskPanel(eventName, task, true);
                completedPanel.add(taskPanel);
            }
        }

        todoPanel.revalidate();
        todoPanel.repaint();
        completedPanel.revalidate();
        completedPanel.repaint();
    }

    private JPanel createTaskPanel(String eventName, String taskText, boolean isCompleted) {
        JPanel panel = new JPanel();
        panel.setLayout(new java.awt.BorderLayout());
        panel.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        
        // Set fixed height for consistent sizing
        panel.setPreferredSize(new java.awt.Dimension(0, 30));
        panel.setMinimumSize(new java.awt.Dimension(0, 30));
        panel.setMaximumSize(new java.awt.Dimension(Integer.MAX_VALUE, 30));

        JCheckBox checkBox = new JCheckBox(taskText);
        checkBox.setSelected(isCompleted);
        checkBox.addItemListener(new TaskItemListener(eventName, taskText, isCompleted));

        JButton deleteButton = createDeleteButton();
        deleteButton.addActionListener(e -> deleteTask(eventName, taskText, isCompleted));

        panel.add(checkBox, java.awt.BorderLayout.CENTER);
        panel.add(deleteButton, java.awt.BorderLayout.EAST);

        return panel;
    }

    private JButton createDeleteButton() {
        JButton deleteButton = new JButton();
        
        // Try to create PNG-based icon
        try {
            ImageIcon icon = createSVGIcon();
            if (icon != null) {
                deleteButton.setIcon(icon);
            } else {
                // Fallback to Unicode trash icon
                deleteButton.setText("🗑");
                deleteButton.setFont(new java.awt.Font("Segoe UI Emoji", java.awt.Font.PLAIN, 12));
            }
        } catch (Exception e) {
            // Fallback to Unicode trash icon
            deleteButton.setText("🗑");
            deleteButton.setFont(new java.awt.Font("Segoe UI Emoji", java.awt.Font.PLAIN, 12));
        }
        
        // Set fixed size for consistency
        deleteButton.setPreferredSize(new java.awt.Dimension(26, 26));
        deleteButton.setMinimumSize(new java.awt.Dimension(26, 26));
        deleteButton.setMaximumSize(new java.awt.Dimension(26, 26));
        deleteButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        deleteButton.setToolTipText("Delete task");
        deleteButton.setBorderPainted(false);
        deleteButton.setContentAreaFilled(false);
        deleteButton.setFocusPainted(false);
        
        // Add hover effect
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteButton.setContentAreaFilled(true);
                deleteButton.setBackground(new java.awt.Color(255, 200, 200));
            }
            
            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                deleteButton.setContentAreaFilled(false);
            }
        });
        
        return deleteButton;
    }

    private ImageIcon createSVGIcon() {
        try {
            // Try multiple paths to load the delete PNG icon
            String[] possiblePaths = {
                "c:\\Users\\Apon\\Desktop\\JavaApplication1\\src\\images\\delete.png",
                "src\\images\\delete.png",
                "images\\delete.png",
                "..\\images\\delete.png"
            };
            
            for (String path : possiblePaths) {
                java.io.File iconFile = new java.io.File(path);
                if (iconFile.exists()) {
                    ImageIcon originalIcon = new ImageIcon(iconFile.getAbsolutePath());
                    // Check if the image loaded successfully
                    if (originalIcon.getIconWidth() > 0 && originalIcon.getIconHeight() > 0) {
                        java.awt.Image scaledImage = originalIcon.getImage().getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH);
                        return new ImageIcon(scaledImage);
                    }
                }
            }
            
            // Try loading from classpath
            try {
                java.net.URL iconURL = getClass().getClassLoader().getResource("images/delete.png");
                if (iconURL != null) {
                    ImageIcon originalIcon = new ImageIcon(iconURL);
                    if (originalIcon.getIconWidth() > 0 && originalIcon.getIconHeight() > 0) {
                        java.awt.Image scaledImage = originalIcon.getImage().getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH);
                        return new ImageIcon(scaledImage);
                    }
                }
            } catch (Exception e) {
                System.err.println("Classpath loading failed: " + e.getMessage());
            }
            
        } catch (Exception e) {
            System.err.println("Error loading delete.png: " + e.getMessage());
        }
        
        // Fallback: Use Unicode trash emoji
        return null; // This will trigger the fallback text in createDeleteButton
    }

    private void deleteTask(String eventName, String taskText, boolean isCompleted) {
        int result = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to delete this task?", 
            "Confirm Delete", 
            JOptionPane.YES_NO_OPTION);

        if (result == JOptionPane.YES_OPTION) {
            if (isCompleted) {
                eventCompletedTasks.get(eventName).remove(taskText);
            } else {
                eventTasks.get(eventName).remove(taskText);
            }
            
            // Refresh the display
            loadTasksForEvent(eventName);
        }
    }

    private class TaskItemListener implements ItemListener {
        private final String eventName;
        private final String taskText;
        private final boolean wasCompleted;

        public TaskItemListener(String eventName, String taskText, boolean wasCompleted) {
            this.eventName = eventName;
            this.taskText = taskText;
            this.wasCompleted = wasCompleted;
        }

        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                // Task completed - move from todo to completed
                if (!wasCompleted) {
                    eventTasks.get(eventName).remove(taskText);
                    eventCompletedTasks.get(eventName).add(taskText);
                }
            } else {
                // Task unchecked - move from completed to todo
                if (wasCompleted) {
                    eventCompletedTasks.get(eventName).remove(taskText);
                    eventTasks.get(eventName).add(taskText);
                }
            }

            // Refresh the display
            SwingUtilities.invokeLater(() -> loadTasksForEvent(eventName));
        }
    }
    
    // Custom cell renderer for event list with delete buttons
    private class EventListCellRenderer extends JPanel implements ListCellRenderer<String> {
        private JLabel eventLabel;
        private JButton deleteButton;
        
        public EventListCellRenderer() {
            setLayout(new BorderLayout());
            setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
            
            eventLabel = new JLabel();
            eventLabel.setOpaque(false);
            
            deleteButton = createDeleteButton();
            deleteButton.setToolTipText("Delete event");
            
            add(eventLabel, BorderLayout.CENTER);
            add(deleteButton, BorderLayout.EAST);
        }
        
        @Override
        public Component getListCellRendererComponent(JList<? extends String> list, String value,
                int index, boolean isSelected, boolean cellHasFocus) {
            
            eventLabel.setText(value);
            
            if (isSelected) {
                setBackground(list.getSelectionBackground());
                eventLabel.setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                eventLabel.setForeground(list.getForeground());
            }
            
            setOpaque(isSelected);
            return this;
        }
    }
    
    private void deleteSpecificEvent(String eventName) {
        int result = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to delete event '" + eventName + "' and all its tasks?", 
            "Confirm Delete", 
            JOptionPane.YES_NO_OPTION);

        if (result == JOptionPane.YES_OPTION) {
            // Remove from UI
            eventListModel.removeElement(eventName);
            
            // Remove from data structures
            eventTasks.remove(eventName);
            eventCompletedTasks.remove(eventName);
            eventDates.remove(eventName);
            
            // Delete files
            try {
                File taskFile = new File(eventName + ".txt");
                File completedFile = new File("COMPLETED_" + eventName + ".txt");
                
                if (taskFile.exists()) {
                    taskFile.delete();
                }
                if (completedFile.exists()) {
                    completedFile.delete();
                }
            } catch (Exception e) {
                System.err.println("Error deleting files for " + eventName + ": " + e.getMessage());
            }
            
            // Clear task panels if this was the selected event
            String selectedEvent = eventList.getSelectedValue();
            if (selectedEvent == null || selectedEvent.equals(eventName)) {
                todoPanel.removeAll();
                completedPanel.removeAll();
                selectedEventTitle.setText("Event: No event selected");
                selectedEventDate.setText("Date:");
                
                todoPanel.revalidate();
                todoPanel.repaint();
                completedPanel.revalidate();
                completedPanel.repaint();
            }
        }
    }

    private void loadEventsFromFiles() {
        try {
            Path currentDir = Paths.get(System.getProperty("user.dir"));
            try (var pathStream = Files.list(currentDir)) {
                pathStream.filter(path -> path.toString().endsWith(".txt"))
                    .filter(path -> !path.getFileName().toString().startsWith("COMPLETED_"))
                    .forEach(path -> {
                        String fileName = path.getFileName().toString();
                        String eventName = fileName.substring(0, fileName.length() - 4); // Remove .txt

                        if (!eventListModel.contains(eventName)) {
                            eventListModel.addElement(eventName);
                            eventTasks.put(eventName, new ArrayList<>());
                            eventCompletedTasks.put(eventName, new ArrayList<>());
                            eventDates.put(eventName, ""); // Date will be loaded if available
                        }
                    });
            }
        } catch (IOException e) {
            System.err.println("Error loading events from files: " + e.getMessage());
        }
    }

    private void loadTasksFromFile(String eventName) {
        // Load pending tasks
        try {
            File taskFile = new File(eventName + ".txt");
            if (taskFile.exists()) {
                List<String> tasks = Files.readAllLines(taskFile.toPath());
                eventTasks.put(eventName, new ArrayList<>(tasks));
            }
        } catch (IOException e) {
            System.err.println("Error loading tasks for " + eventName + ": " + e.getMessage());
        }

        // Load completed tasks
        try {
            File completedFile = new File("COMPLETED_" + eventName + ".txt");
            if (completedFile.exists()) {
                List<String> completedTasks = Files.readAllLines(completedFile.toPath());
                eventCompletedTasks.put(eventName, new ArrayList<>(completedTasks));
            }
        } catch (IOException e) {
            System.err.println("Error loading completed tasks for " + eventName + ": " + e.getMessage());
        }
    }

    private void saveCurrentEvent() {
        String selectedEvent = eventList.getSelectedValue();
        if (selectedEvent == null) {
            JOptionPane.showMessageDialog(this, "No event selected!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Save pending tasks
            File taskFile = new File(selectedEvent + ".txt");
            try (PrintWriter writer = new PrintWriter(new FileWriter(taskFile))) {
                List<String> tasks = eventTasks.get(selectedEvent);
                if (tasks != null) {
                    for (String task : tasks) {
                        writer.println(task);
                    }
                }
            }

            // Save completed tasks
            File completedFile = new File("COMPLETED_" + selectedEvent + ".txt");
            try (PrintWriter writer = new PrintWriter(new FileWriter(completedFile))) {
                List<String> completedTasks = eventCompletedTasks.get(selectedEvent);
                if (completedTasks != null) {
                    for (String task : completedTasks) {
                        writer.println(task);
                    }
                }
            }

            JOptionPane.showMessageDialog(this, "Saved successfully", "Success", JOptionPane.INFORMATION_MESSAGE);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
